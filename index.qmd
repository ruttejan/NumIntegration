---
title: "Numerická integrace"
author: "Jan Rutterle"
bibliography: references.bib
output-dir: docs
format:
    revealjs:
        theme: "white"
        transition: "slide"
        css: styles.css
        slide-number: false
        html-math-method: mathjax
        code-fold: true
        fig-height: 4
        fig-width: 9
        fig-align: center
jupyter: julia-1.9
---

# Úvod

::: uvod
-   Numerická integrace je technika aproximace určitého intergálu.
-   Pro numerickou integraci můžeme využít několik metod:
:::

::: columns
::: {.column width="50%"}
```         
    Newton-Cotesovy vzorce
        - Obdélníková
        - Lichoběžníková
        - Simpsonova
```
:::

::: {.column width="50%"}
```         
    Další metody
        - Rombergova
        - Gaussova
```
:::
:::

::: uvod
-   Numerické integrace užijeme v případech, kdy je integrand příliš složitý nebo nelze jej vypočítat
-   V této prezentaci se zaměříme na Newton-Cotesovy metody
:::

# Obdélníková metoda

## Obdélníková metoda

::: txt2
-   Anglicky: "Midpoint Rule"

-   Metoda rozdělí integrovaný interval na $n$ stejných podintervalů ($n + 1$ bodů)

-   Mezi každou dvojicí po sobě jdoucích bodů vytvoří obdélník s výškou funkční hodnoty jejich středu

-   Aproximace integrálu se tedy rovná součtu obsahů obdélníků

$$h = \frac{a - b}{n}$$

$$x_0 = a; x_i = a + i \cdot h; x_n = b,\space\space \text{kde} \space\space i = 1\dots n-1$$

$$\int_{a}^{b} f(x) \, dx \approx \sum_{i=1}^{n} f\left(\frac{x_{i-1} + x_i}{2}\right) h$$
:::

## Výpočet - Obdélníková metoda

```{julia}
#| echo: true
#| eval: false
#| code-fold: false
function numerical_int(::Midpoint,
    f::Function,
    a::Real,
    b::Real,
    n::Int
)
    h = (b - a) / n
    x_values = collect(a:h:b)
    integral = 0
    for i = 2:n
        integral += f((x_values[i-1] + x_values[i]) / 2)
    end
    return h * integral
end
```

## Vizualizace - Obdélníková metoda

```{julia}
#| label: midpoint1
#| echo: true

using Plots
include("functions.jl")

plot_int(Midpoint(), x->sin(x), 0, 2*pi, 6)
```

## plot_int(Midpoint(),...)

```{julia}
#| echo: true
#| code-fold: false
#| eval: false

function plot_int(:: Midpoint, f, a, b, n)
    h = (b - a) / n
    x_values = collect(a : h : b)
    x_mids = []
    y_mids = []
    plot(f, a, b, label="Function", legend=true)
    for i in 2:n+1
        x1 = x_values[i - 1]
        x2 = x_values[i]
        mid = (x1 + x2) / 2
        push!(x_mids, mid)
        y = f(mid)
        push!(y_mids, y)
        plot!([x1, x2, x2, x1, x1], [0.0, 0.0, y, y, 0.0], 
            seriestype=:shape,
            lw=1,
            color=:red,
            fillalpha=0.2,
            label=nothing)
    end
    
    scatter!(x_mids, y_mids, color=:blue, markersize=4, label="Data Points")
    scatter!(x_values, zeros(size(x_values)) ,color=:black, markersize=4, label="n-points")

end
```

# Lichoběžníková metoda

## Lichoběžníková metoda

::: txt2
-   Anglicky: "Trapezoid Rule"

-   Rozdělíme si interval stejně jako u obdélníkové metody; $n$ podintervalů ($n + 1$ bodů)

-   Funkční hodnoty dvou po sobě jdoucích bodů spojíme úsečkou (vytoříme lichoběžník)

-   Aproximace intgrálu se tedy rovná sumě obsahů lichoběžníků

$$h = \frac{a - b}{n}$$

$$x_0 = a;\space x_i = a + i \cdot h;\space x_n = b,\space\space \text{kde} \space\space i = 1\dots n-1$$

$$\int_{a}^{b} f(x) \, dx \approx \frac{h}{2} (x_0 + x_n + \sum_{i=1}^{n-1} 2f(x_i))$$

:::

## Výpočet - Lichoběžníková metoda

```{julia}
#| echo: true
#| eval: false
#| code-fold: false

function numerical_int(::Trapezoid,
    f::Function,
    a::Real,
    b::Real,
    n::Int
)
    h = (b - a) / n
    x_values = collect((a+h):h:(b-h))
    integral = (f(a) + f(b))
    for i = 1:length(x_values)
        integral += 2 * f(x_values[i])
    end
    return (h / 2) * integral
end
```

## Vizualizace - Lichoběžníková metoda

```{julia}
#| label: trapezoid1
#| echo: true

using Plots
include("functions.jl")

plot_int(Trapezoid(), x->sin(x), 0, 2*pi, 8)
```

## plot_int(Trapezoid(),...)

```{julia}
#| echo: true
#| code-fold: false
#| eval: false

function plot_int(::Trapezoid,
    f::Function,
    a::Real,
    b::Real,
    n::Int
)
    h = (b - a) / n
    x_values = collect(a:h:b)
    y_values = collect(f.(x_values))
    plot(f, a, b, label="Function", legend=true)
    for i in 2:n+1
        x1 = x_values[i-1]
        x2 = x_values[i]
        y1 = y_values[i-1]
        y2 = y_values[i]
        plot!([x1, x2, x2, x1, x1], [0.0, 0.0, y2, y1, 0.0],
            seriestype=:shape,
            lw=1,
            color=:red,
            fillalpha=0.2,
            label=nothing)
    end
    scatter!(x_values, zeros(size(x_values)), color=:black, markersize=4, label="n-points")
    scatter!(x_values, y_values, color=:blue, markersize=4, label="Data Points")

end
```

# Simpsonova metoda

## Simpsonova metoda

::: txt2

-   Opět rozdělíme interval na $n$ podintervalů ($n + 1$ bodů)
-   Funkčními hodnotami krajních bodů a středu intrervalů proložíme paraboly
-   Aproximace integrálu se zjednodušší na výpočet integrálu z kvadratické funkce
$$h = \frac{a - b}{n}$$
$$x_0 = a;\space x_i = a + i \cdot h;\space x_n = b,\space\space \text{kde} \space\space i = 1\dots n-1$$
$$\int_{x_i}^{x_{i+1}} f(x) \, dx \approx \int_{x_i}^{x_{i+1}} ax^2 + bx + c \, dx = \frac{h}{6}(f(x_i) + 4f(x_i + \frac{h}{2}) + f(x_{i+1})) $$

-   Ze vzorečku je vidět, že krajní body mají váhu 1 a středové body mají váhu 4.
-   Jelikož všechny krajní body podintervalů (kromě krajních bodů původního intervalu) použijeme dvakrát, přiřadíme jim váhu 2 [pro více informací: @navara2023]
$$\int_{a}^{b} f(x) \, dx \approx \frac{h}{6}(x_0 + x_n + \sum_{i=1}^{n-1} 2f(x_i) + \sum_{i=0}^{n-1} 4f(x_i + \frac{h}{2}))$$ 

:::

## Výpočet - Simpsonova metody

```{julia}
#| echo: true
#| eval: false
#| code-fold: false

function numerical_int(::Simpson,
    f::Function,
    a::Real,
    b::Real,
    n::Int
)
    h = (b - a) / n
    h2 = h / 2
    x_edge = collect((a+h):h:(b-h))
    x_mids = collect((a+h2):h:(b-h/2))
    integral = f(a) + f(b)
    for i in eachindex(x_edge)
        integral += 2 * f(x_edge[i])
    end

    for i in eachindex(x_mids)
        integral += 4 * f(x_mids[i])
    end
    return integral * (h / 6)
end
```

## Vizualizace - Simpsonova metoda

```{julia}
#| label: simpson1
#| echo: true

using Plots
include("functions.jl")

plot_int(Simpson(), x->sin(x), 0, 2*pi, 3)
```

## plot_int(Simpson(),...)

```{julia}
#| echo: true
#| eval: false
#| code-fold: false

function plot_int(::Simpson,
    f::Function,
    a::Real,
    b::Real,
    n::Int
)
    h = (b - a) / n
    x_values = collect(a:h:b)
    x_mids = []
    y_mids = []
    plot(f, a, b, label="Function", legend=true)
    for i in 2:n+1
        x1 = x_values[i-1]
        x2 = x_values[i]
        mid = (x1 + x2) / 2
        push!(x_mids, mid)
        y = f(mid)
        push!(y_mids, y)
        px = [x1, mid, x2]
        py = [f(x1), f(mid), f(x2)]
        A = hcat([px[i]^2 for i in 1:3], px, [1, 1, 1])
        b = py
        a, b, c = A \ b
        parabola(x, a, b, c) = a * x^2 + b * x + c
        points_x = vcat([x2, x1], collect(range(x1, x2, length=10)))
        points_y = vcat([0.0, 0.0], [parabola(x, a, b, c) for x in points_x[3:length(points_x)]])
        plot!(points_x, points_y;
            seriestype=:shape,
            lw=1,
            color=:red,
            fillalpha=0.2,
            label=nothing)
    end

    scatter!(x_mids, y_mids, color=:blue, markersize=4, label="Data Points")
    scatter!(x_values, zeros(size(x_values)), color=:black, markersize=4, label="n-points")

end
```



# Porovnání metod


## Funkce pro porovnání

-   Pro porovnání využijeme dalších dvou funkcí: **integrate()** a **integrate_compare()**
-   Tyto funkce zvětšují počet subintervalů, dokud není aproximace dostatečně dobrá
-   Návratovými hodnotami jsou: *výsledná hodnota, horní odhad chyby, počet subintervalů*
-   Pro určení horního odhadu chyby využijeme metody: **error_int()**
-   Implementace těchto funkcí na dalších slidech

## integrate()

::: txt2
-   Tato funkce iteruje, dokud rozdíl aktuální a předchozí aproximace není menší než nějaký zadaný threshold, nebo dokud není dosažen maximální počet iterací.
:::

```{julia}
#| echo: true
#| eval: false
#| code-fold: false

function integrate(
    method::IntMethod,
    f::Function,
    a::Real,
    b::Real;
    threshold::Real=1e-8,
    numIter::Int=20
)

    n = 2  # Initial number of split points
    prev_integral = numerical_int(method, f, a, b, n)
    i = 0
    while i < numIter
        n *= 2  # Double the number of split points
        integral = numerical_int(method, f, a, b, n)
        difference = abs(integral - prev_integral)

        if difference < threshold
            error = error_int(method, f, a, b, n)
            return integral, error, n
        end

        prev_integral = integral
        i += 1
    end
    error = error_int(method, f, a, b, n)
    return prev_integral, error, n
end
```

## integrate_compare()

::: txt2
-   Tato funkce iteruje, dokud rozdíl aproximace a referenční aproximace z knihovny Quadgk není menší než nějaký zadaný threshold, nebo dokud není dosažen maximální počet iterací.
:::

```{julia}
#| echo: true
#| eval: false
#| code-fold: false

function integrate_compare(
    method::IntMethod,
    f::Function,
    a::Real,
    b::Real;
    threshold::Real=1e-8,
    numIter::Int=20
)

    ref_result, _ = quadgk(f, a, b)
    n = 1  # Initial number of split points
    i = 0
    integral = numerical_int(method, f, a, b, n)
    while i < numIter
        n *= 2  # Double the number of split points
        integral = numerical_int(method, f, a, b, n)
        difference = abs(ref_result - integral)

        if difference < threshold
            error = error_int(method, f, a, b, n)
            return integral, error, n
        end
        i += 1
    end
    error = error_int(method, f, a, b, n)
    return integral, error, n

end
```

## error_int()
[@sfu_numerical_integration]
```{julia}
#| code-fold: false
#| eval: false
#| echo: true

function error_int(::Midpoint, 
    f :: Function,
    a :: Real, 
    b :: Real, 
    n :: Int
)
    fd1(x) = ForwardDiff.derivative(f, x)
    fd2(x) = ForwardDiff.derivative(fd1, x)

    fx_max = findmax(x -> abs(fd2(x)), a:b)[1]
    return (((b - a)^3) * fx_max) / (24 * n^2)
end

function error_int(::Trapezoid,
    f::Function,
    a::Real,
    b::Real,
    n::Int
)
    fd1(x) = ForwardDiff.derivative(f, x)
    fd2(x) = ForwardDiff.derivative(fd1, x)

    fx_max = findmax(x -> abs(fd2(x)), a:b)[1]
    return (b - a)^3 / 12 * fx_max / n^2
end

function error_int(::Simpson,
    f::Function,
    a::Real,
    b::Real,
    n::Int
)
    fd1(x) = ForwardDiff.derivative(f, x)
    fd2(x) = ForwardDiff.derivative(fd1, x)
    fd3(x) = ForwardDiff.derivative(fd2, x)
    fd4(x) = ForwardDiff.derivative(fd3, x)

    fx_max = findmax(x -> abs(fd4(x)), a:b)[1]
    return (((b - a)^5) * fx_max) / (180 * n^4)
end
```

## Porovnání

::: txt2
- Funkce: $f(x) = \sin^{100}(x)$; interval: $[a,b] = [0,2]$; threshold, počet iterací: default
:::

```{julia}
#| code-fold: true
#| eval: true
#| echo: true

using Pkg
Pkg.add("QuadGK") # výpočet referenční aproximace
using QuadGK

Pkg.add("ForwardDiff") # potřebná knihovna pro výpočet horního odhadu chyby
using ForwardDiff

f(x) = sin(x)^100
a = 0.0
b = 2.0

result, error = quadgk(f, a, b);
result1, error1, n1 = integrate(Trapezoid(), f, a, b);
result2, error2, n2 = integrate(Midpoint(), f, a, b);
result3, error3, n3 = integrate(Simpson(), f, a, b);
println("Reference: ", result, ", horní odhad chyby: ", error)
println()
println("Aproximace za použití funkce \"integrate()\":")
println()
println("Lichoběžníky: ", result1, ", horní odhad chyby: ", error1, ", n: ", n1)
println("Obdélníky: ", result2, ", horní odhad chyby: ", error2, ", n: ", n2)
println("Simpson: ", result3, ", horní odhad chyby: ", error3, ", n: ", n3)

result21, error21, n21 = integrate_compare(Trapezoid(), f, a, b);
result22, error22, n22 = integrate_compare(Midpoint(), f, a, b);
result23, error23, n23 = integrate_compare(Simpson(), f, a, b);

println()
println("Aproximace za použití funkce \"integrate_compare()\":")
println()
println("Lichoběžníky: ", result21, ", horní odhad chyby: ", error21, ", n: ", n21)
println("Obdélníky: ", result22, ", horní odhad chyby: ", error22, ", n: ", n22)
println("Simpson: ", result23, ", horní odhad chyby: ", error23, ", n: ", n23)
```

## Porovnání pokračování

::: txt2
- Pro lepší zobrazení rozdílu metod použijeme pouze funkci **numerical_int()**
- Funkce: $f(x) = \sin^{100}(x)$; interval: $[a,b] = [0,2]$; $n = 5$
:::

```{julia}
#| code-fold: true
#| eval: true
#| echo: true

# potřebné knihovny už jsou naimportované
# using Pkg
# Pkg.add("QuadGK") # výpočet referenční aproximace
# using QuadGK

# Pkg.add("ForwardDiff") # potřebná knihovna pro výpočet horního odhadu chyby
# using ForwardDiff

f(x) = sin(x)^100
a = 0.0
b = 2.0
n = 5

result, error = quadgk(f, a, b);
result1 = numerical_int(Trapezoid(), f, a, b, n);
result2 = numerical_int(Midpoint(), f, a, b, n);
result3 = numerical_int(Simpson(), f, a, b, n);
println("Reference: ", result, ", horní odhad chyby: ", error)
println()
println("Aproximace za použití funkce \"numerical_int()\":")
println()
println("Lichoběžníky: ", result1)
println("Obdélníky: ", result2)
println("Simpson: ", result3)
```


# Závěr

## Závěr

-   Rozdíl mezi porovnávanými výsledky (při použití integrate() a integrate_compare()) byl velice malý, jelikož jsme použili dostatečný počet dělících intervalů pro každou z metod.

-   Simpsonova metoda nám však dává dobrou aproximaci již pro malá $n$.

# Zdroje

:::{#refs}
:::